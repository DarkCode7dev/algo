#include<stdio.h>
#include<malloc.h>
struct node 
{
  int info;
  struct node *next;
};

void main()
{
struct node *first=NULL,*last,*temp;
struct node* create(struct node*);
struct node* insert(struct node *,int, int);
struct node* delete(struct node *,int);
int ch,R,X,key;
void display(struct node*);
printf("There is no list exit , you have to create the list\n");
first=create(first);
do
{
  printf("\nThe Operations on Linked List");
  printf("1........Insert\n");
  printf("2........Delete\n");
  printf("3........Display\n");
  printf("4........Exit\n");
  printf("\nEnter your choice :\n");
  scanf("%d",&ch);
  switch(ch)
     	{
	   	case 1:
			{
			 printf("\nEnter the key");
			 scanf("%d",&key);
			 printf("\nEnter the value to be inserted");
			 scanf("%d",&X);
			 first=insert(first,X,key);
			 break;	
			}
		case 2:
			{
			  printf("\nEnter the key");
			 scanf("%d",&key);
			 first=delete(first,key);
			 break;			
			}
		case 3:
			{
			  display(first);
			  break;		
			}	
		case 4:
			{
			 exit(1);	
			}
		default:
			break;
	}
printf("\nDo you want to continue:");
scanf("%d",&R);
}while(R!=0);
}//Main Ends here

//The function Create List

struct node* create(struct node *first)
{
  struct node *temp,*last;
  int x,r;  
do
    {
     printf("\nEnter the info ");
     scanf("%d",&x);
     temp=malloc(sizeof(struct node));
     temp->info=x;
     temp->next=NULL;
     if(first==NULL)
	{
	 first=temp;
	 last=temp;	
	}
     else
	{
	  last->next=temp;
	  last=temp;	
	}
     printf("\nDo you want more nodes 1 for continue and 0 for exit");
     scanf("%d",&r); 

    }while(r!=0);
return(first);

}//End of Create

//Function Insert node after given element(key). Inserrt as last node if not find 
struct node* insert(struct node *first, int x, int key)
{
 struct node *prev,*new_node,*temp;
 if(first==NULL)
	{
	printf("\nNo list exit, you have to create list");
	first=create(first);	
	return(first);
	}
  
	prev=first;
	temp=first;
        new_node=malloc(sizeof(struct node));
	new_node->info=x;
 	new_node->next=NULL;
	while((temp->next!=NULL)&&(temp->info!=key))
           {
              prev=temp;
	      temp=temp->next;
	   }
        if(temp->info==key)
	{
          new_node->next=temp->next;
          temp->next=new_node;	
	}
       else
	{
	  temp->next=new_node;	
	}
       return(first);
}//End of Insert
//Delete function
struct node* delete(struct node *first,int key)
{
struct node *temp,*prev;
if(first==NULL)
 {
   printf("list is empty");
   return(first);
 }
 temp=first; 
while((temp->next!=NULL)&&(temp->info!=key))
    {
    prev=temp;
    temp=temp->next;
    }
 if(temp->info==key)
    {
    
	   if(temp==first)
		{
		first=first->next;
		return (first);
		}
	   else
	       {
		prev->next=temp->next;	       
		free(temp);	
		return(first);	
		}
    }
 else
{
	printf("No such element");
	return(first);
}
}
//Display Function

void display(struct node *first)
{
struct node *temp;
temp=first;
if(first==NULL)
   {
	printf ("The list is empty");
   }
else
   {
	while(temp!=NULL)
        {
printf("|%d||%u|-->",temp->info,temp->next);
temp=temp->next;
	}
   }
}














